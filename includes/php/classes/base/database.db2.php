<?php
require_once('_db.php');
require_once('recordset.php');
class CDataBase extends CBaseDB
{
	function CDataBase(&$app)
	{
		parent::CBaseDB($app);
		$this->now_stmt = 'CURRENT TIMESTAMP';
		$this->datetime_stmt = 'TIMESTAMP';
		$this->clob_stmt = 'CLOB';
		$this->auto_inc_stmt = 'GENERATED BY DEFAULT AS IDENTITY';
		$this->concat_func_stmt = '';
		$this->concat_char = '||';

		if (!function_exists('db2_connect'))
			system_die('DB2 module is not installed');
	}
	function _set_limit($sql, $limit)
	{
		$this->_int_data_seek = 0;
		if (!is_null($limit))
			if (!is_array($limit))
				$sql.= ($limit>0) ? (' fetch first '.intval($limit).' rows only') : '';
			elseif (isset($limit[1]) && isset($limit[0]) && ($limit[1] > 0) && ($limit[0] > 0))
			{
				$sql.=' fetch first '.(intval($limit[0]) * intval($limit[1])).' rows only';
				$this->_int_data_seek = (intval($limit[0])-1) * intval($limit[1]);
			}
		return $sql;
	}
	function free($id)
	{
		return @db2_free_result($id);
	}
	function get_last_id()
	{
		$a = $this->internalFetchRow($this->internalQuery('VALUES IDENTITY_VAL_LOCAL()'));
		return intval($a[0]);
	}
	function internalConnect()
	{
		if ($this->LinkID === false)
		{
			$conn = 'DRIVER={IBM DB2 ODBC DRIVER};DATABASE='.((isset($this->DB_DATABASE))?($this->DB_DATABASE):(DB_DATABASE)).';';
			$conn .= 'HOSTNAME='.((isset($this->DB_SERVER))?($this->DB_SERVER):(DB_SERVER)).';';
			$conn .= 'PORT='.((isset($this->DB_PORT))?($this->DB_PORT):(DB_PORT)).';';
			$conn .= 'PROTOCOL=TCPIP;';
			$conn .= 'UID='.((isset($this->DB_USER))?($this->DB_USER):(DB_USER)).';';
			$conn .= 'PWD='.((isset($this->DB_PASSWORD))?($this->DB_PASSWORD):(DB_PASSWORD)).';';
			$this->LinkID = @db2_connect($conn, null, null, array('autocommit'=>DB2_AUTOCOMMIT_ON));
			if ($this->LinkID !== false)
				return $this->LinkID;
			else
				$this->last_error = 'Cannot connect to DataBase server';
			return false;
		}
		return $this->LinkID;
	}
	// internalDisconnect
	function internalDisconnect()
	{
		if ($this->LinkID > 0) @db2_close($this->LinkID);
		$this->LinkID = false;
	}
	function internalEscape($s)
	{
		return str_replace('\'', '\'\'', $s);
	}
	function internalLikeEscape($s)
	{
		$s = str_replace(array('\'', '%', '_'), array('\'\'', '\\%', '\\_'), $s);
		return $s;
	}
	function internalNumRows($r)
	{
		return @db2_num_rows($r);
	}
	function internalFetchRow($r, $count=-1)
	{
		$row = db2_fetch_row($r);
		if ($count == -1)
			$count = db2_num_fields($r);
		if ($row && $count)
		{
			$a = array();
			for ($i=0; $i<$count; $i++)
				$a[$i] = db2_result($r, $i);
			return $a;
		}
		else
			return false;
	}
	function internalFetchArray($r, $count=-1, $names=null)
	{
		$row = db2_fetch_row($r);
		if ($count == -1)
		{
			$count = db2_num_fields($r);
			// TODO: names fetching
		}
		if ($row && $count)
		{
			$a = array();
			for ($i=0; $i<$count; $i++)
				$a[$i] = $a[$names[$i]] = db2_result($r, $i);
			return $a;
		}
		else
			return false;
	}
	function internalFetchAssoc($r, $count=-1, $names=null)
	{
		$row = db2_fetch_row($r);
		if ($count == -1)
		{
			$count = db2_num_fields($r);
			// TODO: names fetching
		}
		if ($row && $count)
		{
			$a = array();
			for ($i=0; $i<$count; $i++)
				$a[$names[$i]] = db2_result($r, $i);
			return $a;
		}
		else
			return false;
	}
	function internalFetchField($r, $i, $internal_call = false)
	{
		if (!$internal_call)
		{
			$obj = new CObject();
			$obj->name = strtolower(db2_field_name($r, $i));
			return $obj;
		}
		else
			return strtolower(db2_field_name($r, $i));
	}
	function internalNumFields($r)
	{
		return @db2_num_fields($r);
	}
	function internalQuery($str, $params=null)
	{
		$this->last_error = '';
		if ( ($this->LinkID === false) && (!$this->internalConnect()) ) return false;
		$str = str_replace('%prefix%', ((isset($this->DB_PREFIX))?$this->DB_PREFIX:DB_PREFIX), $str);
		if (!$GLOBALS['DebugLevel'])
		{
			$stmt = @db2_prepare($this->LinkID, $str);
			if ($stmt === FALSE)
				return FALSE;
			if (@db2_execute($stmt, is_null($params)?array():$params))
				return $stmt;
			else
				return FALSE;
		}
		else
		{
			$t1 = get_formatted_microtime();
			$stmt = db2_prepare($this->LinkID, $str);
			if ($stmt !== FALSE)
				$id = db2_execute($stmt, is_null($params)?array():$params);
			else
				$id = FALSE;
			$t2 = get_formatted_microtime();
			if ($id !== FALSE)
			{
				$db = debug_backtrace();
				if (isset($db[1]['file']))
					$db_text = explode('\\', $db[1]['file'].':'.$db[1]['line']);
				else
					$db_text = array('');
				$dt = ($t2-$t1);
				if ($dt < 0.01)
					$GLOBALS['GlobalDebugInfo']->Write($db_text[count($db_text)-1].' <font color="green">'.htmlspecialchars($str) . ' time: '.$dt.' success: '.@db2_num_rows($stmt).' rows</font>');
				else
					$GLOBALS['GlobalDebugInfo']->Write($db_text[count($db_text)-1].' <font color="red">'.htmlspecialchars($str) . ' time: '.$dt.'</font> <font color="green">success: '.@db2_num_rows($stmt).' rows</font>');
			}
			else
			{
				$db = debug_backtrace();
				$db_text = explode('\\', $db[1]['file'].':'.$db[1]['line']);
				$this->last_error = 'Cannot perfom SQL query: '.$str . ' '. @db2_stmt_errormsg();
				$GLOBALS['GlobalDebugInfo']->Write($db_text[count($db_text)-1].' <font color="red">'.htmlspecialchars($str) . ' failed ['.@db2_stmt_errormsg().']</font>');
				if (!is_null($params))
					print_arr($params);
				if ($stmt)
					system_die(db2_stmt_error($stmt).': '.db2_stmt_errormsg($stmt));
				else
					system_die(db2_stmt_error().': '.db2_stmt_errormsg());
			}
			return $stmt;
		}
	}
	function lock($tables=null)
	{
		return @db2_autocommit($this->LinkID, DB2_AUTOCOMMIT_OFF);
	}
	function unlock()
	{
		@db2_commit($this->LinkID);
		@db2_autocommit($this->LinkID, DB2_AUTOCOMMIT_ON);
	}
	function is_table($TableName)
	{
		$this->internalConnect();
		$tbl_row = db2_tables($this->LinkID, NULL, '%', strtoupper(((isset($this->DB_PREFIX))?$this->DB_PREFIX:DB_PREFIX).$TableName));
		$cnt=0;
		while ( ($a_arr = $this->internalFetchRow($tbl_row)) )
			$cnt++;
		return ($cnt == 1);
	}
	function &select_sql($TableName, $pk_arr = 0, $or_arr = 0, $fields = null, $add_prefix = true, $limit = null)
	{
		if (strcasecmp(substr($TableName, 0, 6), 'select') == 0)
			$sql = str_replace('%prefix%', ((isset($this->DB_PREFIX))?$this->DB_PREFIX:DB_PREFIX), $TableName);
		else
			$sql = 'select '.(($fields==null)?('*'):(implode(',',$fields))).' from ' . ( ($add_prefix)?(((isset($this->DB_PREFIX))?$this->DB_PREFIX:DB_PREFIX)):('') ) . $TableName;
		$params = array();
		if (is_array($pk_arr))
		{
			$s_fld = '';
			foreach ($pk_arr as $k => $v)
			{
				$s_fld .= ( ($s_fld=='')?(''):(' and ') ) . $k . '=?';
				$params[] = $v;
			}
			if ($s_fld)
				$sql .= ' where ' . $s_fld;
		}
		if (is_array($or_arr))
		{
			$o_fld = '';
			foreach ($or_arr as $k => $v)
				$o_fld .= ( ($o_fld=='')?(''):(',') ) . $k . ' ' . $v;
			if ($o_fld)
				$sql .= ' order by ' . $o_fld;
		}
		$sql = $this->_set_limit($sql, $limit);
		$tbl_row = $this->internalQuery($sql, $params);
		if ($tbl_row) {
			$rcd = new CRecordSet();
			$f_n = $this->internalNumFields($tbl_row);
			for ($i=0; $i<$f_n; $i++) {
				$f_o = $this->internalFetchField($tbl_row, $i, true);
				$rcd->add_field($f_o);
			}
			$cnt = 0;
			while ($cnt++ < $this->_int_data_seek) $this->internalFetchRow($tbl_row, $f_n);
			while ( ($a_arr = $this->internalFetchAssoc($tbl_row, $f_n, $rcd->Fields)) )
				$rcd->add_row($a_arr);
			$this->free($tbl_row);
			return $rcd;
		}
		else
		{
			$res = false;
			return $res;
		}
	}
	function &select_custom_sql($sql, $limit = null)
	{
		// limit = limit OR array(page,items)
		$sql = $this->_set_limit($sql, $limit);
		$tbl_row = $this->internalQuery($sql);
		if ($tbl_row) {
			$rcd = new CRecordSet();
			$f_n = $this->internalNumFields($tbl_row);
			for ($i=0; $i<$f_n; $i++) {
				$f_o = $this->internalFetchField($tbl_row, $i, true);
				$rcd->add_field($f_o);
			}
			$cnt = 0;
			while ($cnt++ < $this->_int_data_seek) $this->internalFetchRow($tbl_row, $f_n);
			while ( ($a_arr = $this->internalFetchAssoc($tbl_row, $f_n, $rcd->Fields)) )
				$rcd->add_row($a_arr);
			$this->free($tbl_row);
			return $rcd;
		}
		else
		{
			$res = false;
			return $res;
		}
	}
	function update_sql($TableName, $UpdateFields, $Keys)
	{
		$sql = 'update ' . ((isset($this->DB_PREFIX))?$this->DB_PREFIX:DB_PREFIX) . $TableName . ' set ';
		$c = '';
		$params = array();
		foreach ($UpdateFields as $k => $v)
		{
			if (strcasecmp($v, 'now()') != 0)
			{
				$sql .= $c.$k.'=?';
				$params[] = $v;
			}
			else
				$sql .= $c.$k.'=CURRENT TIMESTAMP';
			$c = ',';
		}
		$sql .= ' where ';
		$c = '';
		foreach ($Keys as $k => $v) {
			$sql .= $c.$k.'=?';
			$c = ' and ';
			$params[] = $v;
		}
		return $this->internalQuery($sql, $params);
	}
	function insert_sql($TableName, $values)
	{
		$sql = 'insert into ' . ((isset($this->DB_PREFIX))?$this->DB_PREFIX:DB_PREFIX) . $TableName . ' (';
		$c = '';
		foreach ($values as $k => $v) {
			$sql .= $c . $k;
			$c = ',';
		}
		$sql .= ') values(';
		$c = '';
		$params = array();
		foreach ($values as $k => $v)
		{
			if (is_null($v))
				$sql .= $c . 'null';
			elseif (strcasecmp($v, 'now()') != 0)
			{
				$sql .= $c.'?';
				$params[] = $v;
			}
			else
				$sql .= $c . 'CURRENT TIMESTAMP';
			$c = ',';
		}
		$sql .= ')';
		if (!$this->internalQuery($sql, $params)) return false;
		return $this->get_last_id();
	}
	function delete_sql($TableName, $pk_arr = 0)
	{
		$sql = 'delete from ' . ((isset($this->DB_PREFIX))?$this->DB_PREFIX:DB_PREFIX) . $TableName;
		$params = array();
		if (is_array($pk_arr))
		{
			$s_fld = '';
			foreach ($pk_arr as $k => $v)
			{
				$s_fld .= ( ($s_fld=='')?(''):(' and ') ) . $k . '=?';
				$params[] = $v;
			}
			if ($s_fld != '')
				$sql .= ' where ' . $s_fld;
		}
		return $this->internalQuery($sql, $params);
	}
	function get_last_error()
	{
		return $this->last_error;
	}
	function version()
	{
		$this->last_error = '';
		if ( ($this->LinkID === false) && (!$this->internalConnect()) ) return false;
		$ver = @db2_server_info($this->LinkID);
		if ($ver===false) return false;
		$a = array();
		preg_match('/^(\d+\.\d+)/', $ver->DBMS_VER, $a);
		return ( (isset($a[1]))?(doubleval($a[1])):(0) );
	}
}
?>